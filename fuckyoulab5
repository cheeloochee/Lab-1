def stage_sequence(pips):
    lop = []
    for i in range(len(pips)):
        if pips[i][1] == 'left':
            lop = [pips[i][0]] + lop
        elif pips[i][1] == 'right':
            lop.append(pips[i][0])
    return tuple(lop)

def enemy_lists(accs, enemies):
    dou = {}
    for i in accs:
        dou[i] = []
    for j in range(len(enemies)):
        dou[enemies[j][1]] += [enemies[j][0]]
        dou[enemies[j][0]] += [enemies[j][1]]
    return dou

meow = {
    'ange': ['battler', 'kyrie'],
    'battler': ['ange'],
    'erika': [],
    'eva': ['george', 'hideyoshi'],
    'genji': [],
    'george': ['eva'],
    'hideyoshi': ['eva'],
    'jessica': ['krauss', 'natsuhi'],
    'kanon': [],
    'krauss': ['jessica', 'natsuhi'],
    'kyrie': ['ange', 'rudolf'],
    'maria': ['rosa'],
    'natsuhi': ['jessica', 'krauss'],
    'rosa': ['maria'],
    'rudolf': ['kyrie'],
    'shannon': [],
}
print(enemy_lists({
    'ange', 'battler', 'erika', 'eva', 'genji', 'george',
    'hideyoshi', 'jessica', 'kanon', 'krauss', 'kyrie',
    'maria', 'natsuhi', 'rosa', 'rudolf', 'shannon',
}, [
    ('jessica', 'krauss'),
    ('rudolf', 'kyrie'),
    ('ange', 'battler'),
    ('eva', 'george'),
    ('eva', 'hideyoshi'),
    ('krauss', 'natsuhi'),
    ('kyrie', 'ange'),
    ('george', 'eva'),
    ('rosa', 'maria'),
    ('jessica', 'natsuhi'),
    ('eva', 'george'),
])
)

def longest_synonym(words):
    lowl = []
    for i in range(len(words)):
        lowl.append(len(words[i]))
    lolw = [words[j] for j in range(len(lowl)) if lowl[j] == max(lowl)]
    return lolw[0]

def make_poetic(poem, thesaurus):
    taad = {}
    for i in range(len(thesaurus)):
        taad[thesaurus[i][0]] = []
        taad[thesaurus[i][1]] = []
    for j in range(len(thesaurus)):
        (taad[thesaurus[j][0]].append(thesaurus[j][1]) 
        if thesaurus[j][1] not in taad[thesaurus[j][0]] 
        else taad)
        (taad[thesaurus[j][1]].append(thesaurus[j][0]) 
        if thesaurus[j][0] not in taad[thesaurus[j][1]] 
        else taad)

    paal = [*poem.split()]
    for k in range(len(paal)):
        if paal[k] in taad and len(paal[k]) >= len(longest_synonym(taad[paal[k]])):
            print(longest_synonym(taad[paal[k]]))
            print(paal)
            paal[k] = longest_synonym(taad[paal[k]])

    return ' '.join(paal)

def word_mutations(word):
    letterz = 'qwertyuiopasdfghjklzxcvbnm'
    mutations = [word[:i] + word[i+1:] for i in range(len(word))]
    mutations.append(word)
    wat = {
        word[:l] + letterz[j] + word[l:]
        for l in range(1, len(word)+1)
        for j in range(26)
    }
    wat.update([
        word[:l] + letterz[j] + word[l+1:]
        for l in range(len(word))
        for j in range(26)

    ])
    wat.update([
        letterz[m] + word
        for m in range(26)
    ])
    wat.update(mutations)

    if not word:
        wat = {''}

    return wat

allmuts = {
    'aff', 'aoff', 'bff', 'boff', 'cff', 'coff', 'dff', 'doff', 'eff', 'eoff', 'ff', 'fff', 'foff',
    'gff', 'goff', 'hff', 'hoff', 'iff', 'ioff', 'jff', 'joff', 'kff', 'koff', 'lff', 'loff', 'mff',
    'moff', 'nff', 'noff', 'oaf', 'oaff', 'obf', 'obff', 'ocf', 'ocff', 'odf', 'odff', 'oef', 'oeff',
    'of', 'ofa', 'ofaf', 'ofb', 'ofbf', 'ofc', 'ofcf', 'ofd', 'ofdf', 'ofe', 'ofef', 'off', 'offa',
    'offb', 'offc', 'offd', 'offe', 'offf', 'offg', 'offh', 'offi', 'offj', 'offk', 'offl', 'offm',
    'offn', 'offo', 'offp', 'offq', 'offr', 'offs', 'offt', 'offu', 'offv', 'offw', 'offx', 'offy',
    'offz', 'ofg', 'ofgf', 'ofh', 'ofhf', 'ofi', 'ofif', 'ofj', 'ofjf', 'ofk', 'ofkf', 'ofl', 'oflf',
    'ofm', 'ofmf', 'ofn', 'ofnf', 'ofo', 'ofof', 'ofp', 'ofpf', 'ofq', 'ofqf', 'ofr', 'ofrf', 'ofs',
    'ofsf', 'oft', 'oftf', 'ofu', 'ofuf', 'ofv', 'ofvf', 'ofw', 'ofwf', 'ofx', 'ofxf', 'ofy', 'ofyf',
    'ofz', 'ofzf', 'ogf', 'ogff', 'ohf', 'ohff', 'oif', 'oiff', 'ojf', 'ojff', 'okf', 'okff', 'olf',
    'olff', 'omf', 'omff', 'onf', 'onff', 'oof', 'ooff', 'opf', 'opff', 'oqf', 'oqff', 'orf', 'orff',
    'osf', 'osff', 'otf', 'otff', 'ouf', 'ouff', 'ovf', 'ovff', 'owf', 'owff', 'oxf', 'oxff', 'oyf',
    'oyff', 'ozf', 'ozff', 'pff', 'poff', 'qff', 'qoff', 'rff', 'roff', 'sff', 'soff', 'tff', 'toff',
    'uff', 'uoff', 'vff', 'voff', 'wff', 'woff', 'xff', 'xoff', 'yff', 'yoff', 'zff', 'zoff',
}
